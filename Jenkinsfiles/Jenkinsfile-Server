pipeline {
    agent any

    environment {
        DOCKER_IMAGE = credentials('DOCKER_IMAGE_NAME')
        DOCKER_CREDS = 'docker-hub-creds'
        GIT_REPO = 'letsKonnect-end-to-end-devops-implementation'
        GIT_USER = 'ShivaNaniSimha'
        GITHUB_TOKEN_ID = 'github-token'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                 git url: "https://github.com/${GIT_USER}/${GIT_REPO}.git", branch: 'main', credentialsId: 'GITHUB'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Server') {
                    withCredentials([string(credentialsId: 'letskonnect-backend-token', variable: 'TOKEN')]) {
                        withSonarQubeEnv('sonar-server') {
                            script {
                                def scannerHome = tool 'sonar-scanner'
                                sh """
                                    ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=letskonnect-backend \
                                    -Dsonar.projectName=letskonnect-backend \
                                    -Dsonar.sources=. \
                                    -Dsonar.exclusions=**/node_modules/** \
                                    -Dsonar.sourceEncoding=UTF-8 \
                                    -Dsonar.login=${TOKEN}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS}", usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        dir('Server') {
                            sh '''
                            docker login -u "$USER" -p "$PASS"
                            docker build -t $DOCKER_IMAGE:$IMAGE_TAG .
                            docker push $DOCKER_IMAGE:$IMAGE_TAG
                            '''
                        }
                    }
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDS}", usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        dir('Server') {
                            sh '''
                            docker login -u "$USER" -p "$PASS"
                            docker build -t $DOCKER_IMAGE:$IMAGE_TAG .
                            docker push $DOCKER_IMAGE:$IMAGE_TAG
                            '''
                        }
                    }
                }
            }
        }

        stage('Checkout kubernetes manifests') {
            steps {
                 git url: "https://github.com/${GIT_USER}/${GIT_REPO}.git", branch: 'main', credentialsId: 'GITHUB'
            }
        }

        stage('Update Kubernetes Manifest in Git') {
            steps {
                dir('kubernetes-manifests/server') {
                    withCredentials([string(credentialsId: "${GITHUB_TOKEN_ID}", variable: 'TOKEN')]) {
                        sh '''
                        git config user.name "${GIT_USER}"
                        git config user.email "your@email.com"
                        currentTag=\$(grep -oP '(?<=image: ${DOCKER_IMAGE}:).*' deployment.yaml || true) 
                        echo "Old tag: \$currentTag"
                        sed -i "s|image: ${DOCKER_IMAGE}:.*|image: ${DOCKER_IMAGE}:${IMAGE_TAG}|" deployment.yaml
                        git commit -am "Update image tag to ${IMAGE_TAG}"
                        git push https://${TOKEN}@github.com/${GIT_USER}/${GIT_REPO}.git HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
